// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registration-demo/protobuf/registration.proto

package registration

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffb1d4452094c7f, []int{0}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type RegisterResponse struct {
	RegistrationId       string   `protobuf:"bytes,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffb1d4452094c7f, []int{1}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetRegistrationId() string {
	if m != nil {
		return m.RegistrationId
	}
	return ""
}

type BatchRegisterRequest struct {
	BulkRequest          []*RegisterRequest `protobuf:"bytes,1,rep,name=bulk_request,json=bulkRequest,proto3" json:"bulk_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BatchRegisterRequest) Reset()         { *m = BatchRegisterRequest{} }
func (m *BatchRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRegisterRequest) ProtoMessage()    {}
func (*BatchRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffb1d4452094c7f, []int{2}
}

func (m *BatchRegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRegisterRequest.Unmarshal(m, b)
}
func (m *BatchRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRegisterRequest.Marshal(b, m, deterministic)
}
func (m *BatchRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRegisterRequest.Merge(m, src)
}
func (m *BatchRegisterRequest) XXX_Size() int {
	return xxx_messageInfo_BatchRegisterRequest.Size(m)
}
func (m *BatchRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRegisterRequest proto.InternalMessageInfo

func (m *BatchRegisterRequest) GetBulkRequest() []*RegisterRequest {
	if m != nil {
		return m.BulkRequest
	}
	return nil
}

type BulkRegisterResponse struct {
	BulkResponse         []*RegisterResponse `protobuf:"bytes,1,rep,name=bulk_response,json=bulkResponse,proto3" json:"bulk_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BulkRegisterResponse) Reset()         { *m = BulkRegisterResponse{} }
func (m *BulkRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*BulkRegisterResponse) ProtoMessage()    {}
func (*BulkRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffb1d4452094c7f, []int{3}
}

func (m *BulkRegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BulkRegisterResponse.Unmarshal(m, b)
}
func (m *BulkRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BulkRegisterResponse.Marshal(b, m, deterministic)
}
func (m *BulkRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkRegisterResponse.Merge(m, src)
}
func (m *BulkRegisterResponse) XXX_Size() int {
	return xxx_messageInfo_BulkRegisterResponse.Size(m)
}
func (m *BulkRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BulkRegisterResponse proto.InternalMessageInfo

func (m *BulkRegisterResponse) GetBulkResponse() []*RegisterResponse {
	if m != nil {
		return m.BulkResponse
	}
	return nil
}

type Nothing struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nothing) Reset()         { *m = Nothing{} }
func (m *Nothing) String() string { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()    {}
func (*Nothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffb1d4452094c7f, []int{4}
}

func (m *Nothing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nothing.Unmarshal(m, b)
}
func (m *Nothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nothing.Marshal(b, m, deterministic)
}
func (m *Nothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nothing.Merge(m, src)
}
func (m *Nothing) XXX_Size() int {
	return xxx_messageInfo_Nothing.Size(m)
}
func (m *Nothing) XXX_DiscardUnknown() {
	xxx_messageInfo_Nothing.DiscardUnknown(m)
}

var xxx_messageInfo_Nothing proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "registration.register_request")
	proto.RegisterType((*RegisterResponse)(nil), "registration.register_response")
	proto.RegisterType((*BatchRegisterRequest)(nil), "registration.batch_register_request")
	proto.RegisterType((*BulkRegisterResponse)(nil), "registration.bulk_register_response")
	proto.RegisterType((*Nothing)(nil), "registration.nothing")
}

func init() {
	proto.RegisterFile("registration-demo/protobuf/registration.proto", fileDescriptor_9ffb1d4452094c7f)
}

var fileDescriptor_9ffb1d4452094c7f = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbb, 0x4f, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0x7e, 0x1f, 0x8f, 0xde, 0x3e, 0x00, 0x53, 0xaa, 0xaa, 0x03, 0x54, 0x16, 0x12,
	0x59, 0xfa, 0x50, 0x59, 0xbb, 0x80, 0x58, 0x18, 0x18, 0xc8, 0x06, 0x48, 0x44, 0x49, 0x73, 0x69,
	0x2d, 0x92, 0xb8, 0xd8, 0x0e, 0x7f, 0x3b, 0x23, 0x6a, 0x9c, 0x56, 0x4e, 0x01, 0x85, 0x81, 0x2d,
	0xe7, 0x9c, 0xdc, 0x9f, 0xcf, 0xb5, 0x0c, 0x03, 0x89, 0x73, 0xae, 0xb4, 0xf4, 0x35, 0x17, 0xc9,
	0x20, 0xc4, 0x58, 0x8c, 0x96, 0x52, 0x68, 0x11, 0xa4, 0x2f, 0x23, 0x3b, 0x1a, 0x66, 0x2e, 0x6d,
	0xd8, 0x1e, 0x9b, 0xc2, 0xa1, 0xd1, 0x28, 0x3d, 0x89, 0x6f, 0x29, 0x2a, 0x4d, 0x29, 0xfc, 0x4f,
	0xfc, 0x18, 0xbb, 0xa4, 0x4f, 0x9c, 0x9a, 0x9b, 0x7d, 0xd3, 0x36, 0xec, 0x60, 0xec, 0xf3, 0xa8,
	0x5b, 0xcd, 0x4c, 0x23, 0xd8, 0x14, 0x8e, 0xac, 0x69, 0xb5, 0x14, 0x89, 0x42, 0x7a, 0x01, 0x07,
	0xf6, 0x11, 0x1e, 0x0f, 0x73, 0x52, 0xcb, 0xb6, 0x6f, 0x43, 0xf6, 0x04, 0x9d, 0xc0, 0xd7, 0xb3,
	0x85, 0xf7, 0xa5, 0xc1, 0x15, 0x34, 0x82, 0x34, 0x7a, 0x5d, 0xeb, 0x2e, 0xe9, 0xff, 0x73, 0xea,
	0x93, 0xd3, 0x61, 0x61, 0x9d, 0xed, 0x29, 0xb7, 0xbe, 0x9a, 0x71, 0x8d, 0x60, 0xcf, 0xd0, 0xc9,
	0x11, 0xdb, 0xfd, 0x6e, 0xa0, 0x99, 0x27, 0xc6, 0xc8, 0xe9, 0x67, 0x3f, 0xd2, 0xcd, 0x6f, 0x6e,
	0xc3, 0xe0, 0x8d, 0x62, 0x35, 0xd8, 0x4b, 0x84, 0x5e, 0xf0, 0x64, 0x3e, 0xf9, 0xa8, 0x42, 0xdb,
	0xb5, 0x37, 0x56, 0x28, 0xdf, 0xf9, 0x0c, 0xe9, 0x1d, 0xec, 0xaf, 0x31, 0xb4, 0xa4, 0x7c, 0xaf,
	0xec, 0x78, 0x56, 0xa1, 0x0f, 0xd0, 0xdc, 0xd8, 0xab, 0x2e, 0xa5, 0xcc, 0xf3, 0x62, 0xfe, 0xfd,
	0x7d, 0xb0, 0x8a, 0x43, 0xe8, 0x3d, 0x1c, 0xcf, 0x51, 0x6f, 0x42, 0x0c, 0xbd, 0xd0, 0xd7, 0x3e,
	0x3d, 0x29, 0x02, 0xf2, 0x85, 0x7f, 0xd1, 0x75, 0x4c, 0xe8, 0x0c, 0x7a, 0x9b, 0x20, 0x4e, 0x23,
	0xcd, 0x97, 0x11, 0xae, 0x9b, 0xa9, 0x3f, 0xb8, 0x0e, 0x87, 0x8c, 0xc9, 0x75, 0xeb, 0xb1, 0xf0,
	0x9c, 0x83, 0xdd, 0xec, 0x8d, 0x5f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x37, 0x45, 0x00, 0x9a,
	0x14, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistrationServiceClient is the client API for RegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationServiceClient interface {
	// Unary
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Client streaming
	RegisterBulk(ctx context.Context, opts ...grpc.CallOption) (RegistrationService_RegisterBulkClient, error)
	// Server streaming
	GetRegisteredData(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (RegistrationService_GetRegisteredDataClient, error)
	// client/server streaming
	RegisterMultipleRequests(ctx context.Context, opts ...grpc.CallOption) (RegistrationService_RegisterMultipleRequestsClient, error)
}

type registrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationServiceClient(cc *grpc.ClientConn) RegistrationServiceClient {
	return &registrationServiceClient{cc}
}

func (c *registrationServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/registration.Registration_service/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationServiceClient) RegisterBulk(ctx context.Context, opts ...grpc.CallOption) (RegistrationService_RegisterBulkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegistrationService_serviceDesc.Streams[0], "/registration.Registration_service/register_bulk", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationServiceRegisterBulkClient{stream}
	return x, nil
}

type RegistrationService_RegisterBulkClient interface {
	Send(*RegisterRequest) error
	CloseAndRecv() (*BulkRegisterResponse, error)
	grpc.ClientStream
}

type registrationServiceRegisterBulkClient struct {
	grpc.ClientStream
}

func (x *registrationServiceRegisterBulkClient) Send(m *RegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registrationServiceRegisterBulkClient) CloseAndRecv() (*BulkRegisterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkRegisterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registrationServiceClient) GetRegisteredData(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (RegistrationService_GetRegisteredDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegistrationService_serviceDesc.Streams[1], "/registration.Registration_service/get_registered_data", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationServiceGetRegisteredDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegistrationService_GetRegisteredDataClient interface {
	Recv() (*RegisterResponse, error)
	grpc.ClientStream
}

type registrationServiceGetRegisteredDataClient struct {
	grpc.ClientStream
}

func (x *registrationServiceGetRegisteredDataClient) Recv() (*RegisterResponse, error) {
	m := new(RegisterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registrationServiceClient) RegisterMultipleRequests(ctx context.Context, opts ...grpc.CallOption) (RegistrationService_RegisterMultipleRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegistrationService_serviceDesc.Streams[2], "/registration.Registration_service/register_multiple_requests", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationServiceRegisterMultipleRequestsClient{stream}
	return x, nil
}

type RegistrationService_RegisterMultipleRequestsClient interface {
	Send(*RegisterRequest) error
	Recv() (*RegisterResponse, error)
	grpc.ClientStream
}

type registrationServiceRegisterMultipleRequestsClient struct {
	grpc.ClientStream
}

func (x *registrationServiceRegisterMultipleRequestsClient) Send(m *RegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registrationServiceRegisterMultipleRequestsClient) Recv() (*RegisterResponse, error) {
	m := new(RegisterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistrationServiceServer is the server API for RegistrationService service.
type RegistrationServiceServer interface {
	// Unary
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Client streaming
	RegisterBulk(RegistrationService_RegisterBulkServer) error
	// Server streaming
	GetRegisteredData(*Nothing, RegistrationService_GetRegisteredDataServer) error
	// client/server streaming
	RegisterMultipleRequests(RegistrationService_RegisterMultipleRequestsServer) error
}

// UnimplementedRegistrationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServiceServer struct {
}

func (*UnimplementedRegistrationServiceServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedRegistrationServiceServer) RegisterBulk(srv RegistrationService_RegisterBulkServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterBulk not implemented")
}
func (*UnimplementedRegistrationServiceServer) GetRegisteredData(req *Nothing, srv RegistrationService_GetRegisteredDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRegisteredData not implemented")
}
func (*UnimplementedRegistrationServiceServer) RegisterMultipleRequests(srv RegistrationService_RegisterMultipleRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterMultipleRequests not implemented")
}

func RegisterRegistrationServiceServer(s *grpc.Server, srv RegistrationServiceServer) {
	s.RegisterService(&_RegistrationService_serviceDesc, srv)
}

func _RegistrationService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registration.Registration_service/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationService_RegisterBulk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistrationServiceServer).RegisterBulk(&registrationServiceRegisterBulkServer{stream})
}

type RegistrationService_RegisterBulkServer interface {
	SendAndClose(*BulkRegisterResponse) error
	Recv() (*RegisterRequest, error)
	grpc.ServerStream
}

type registrationServiceRegisterBulkServer struct {
	grpc.ServerStream
}

func (x *registrationServiceRegisterBulkServer) SendAndClose(m *BulkRegisterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registrationServiceRegisterBulkServer) Recv() (*RegisterRequest, error) {
	m := new(RegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegistrationService_GetRegisteredData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistrationServiceServer).GetRegisteredData(m, &registrationServiceGetRegisteredDataServer{stream})
}

type RegistrationService_GetRegisteredDataServer interface {
	Send(*RegisterResponse) error
	grpc.ServerStream
}

type registrationServiceGetRegisteredDataServer struct {
	grpc.ServerStream
}

func (x *registrationServiceGetRegisteredDataServer) Send(m *RegisterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RegistrationService_RegisterMultipleRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistrationServiceServer).RegisterMultipleRequests(&registrationServiceRegisterMultipleRequestsServer{stream})
}

type RegistrationService_RegisterMultipleRequestsServer interface {
	Send(*RegisterResponse) error
	Recv() (*RegisterRequest, error)
	grpc.ServerStream
}

type registrationServiceRegisterMultipleRequestsServer struct {
	grpc.ServerStream
}

func (x *registrationServiceRegisterMultipleRequestsServer) Send(m *RegisterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registrationServiceRegisterMultipleRequestsServer) Recv() (*RegisterRequest, error) {
	m := new(RegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RegistrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registration.Registration_service",
	HandlerType: (*RegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _RegistrationService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "register_bulk",
			Handler:       _RegistrationService_RegisterBulk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "get_registered_data",
			Handler:       _RegistrationService_GetRegisteredData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "register_multiple_requests",
			Handler:       _RegistrationService_RegisterMultipleRequests_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "registration-demo/protobuf/registration.proto",
}
